

;1 The Engineering Of An Electronic Personal Trainer

Dear (other) me,

Are you still alive? I've heard you've been wasting your entire life over a keybord lately... Is programming firmwares for baremetal microcontrollers really this addictive?

Well, never mind that... What I really meant to ask is...

Can you still walk straight? Isn't your back irreversibly compromised by now? And isn't your neck making you scream in pain?

Listen to me... You have to do something about it... And quickly!

Be Strong,

Your beloved Alterego



;2 Electronic Personal Trainer V0.1

First things first, I should give this electronic personal trainer a name.

And thy name shall be: Kyactus.

Good. Now that the hard part is done, I should move one by defining some basic functionalities...



;3 Functionalities

For this first version, I'll start super simple. 

Kyactus must be able to start "some sort of alarm" every 30 minutes (or so). And I think I'll be using an LED for an easy win (for now).

That's all for now. Fair enough I guess.



;3 Challenges

As this is serius stuff, I must obey to the 7 commandaments:

;* Thy shall be cheap;
;* Thy shall be small;
;* Thy shall be low-power;
;* Thy shall be mass-producible;
;* Thy shall be addicting;
;* Thy shall be modular;
;* Thy shall be baremetal;



;3 Overview

I need 3 things to bring Kyactus to life:

;* Electronic;
;* Software;
;* Enclosure; 

For the eletronic part, I'm going to use 3 different services/shops: JLCPCB, LCSC and Aliexpress. Also, I'm going to use a software called EasyEDA to design the PCB.

Then, for the software (yes we need software too), I'm going to use the C Programming Language to program our Kyactus little brain (microcontroller). 

Lastly, for the enclosure, I'm going to use a 3D Printer and a free CAD software called FreeCAD.

